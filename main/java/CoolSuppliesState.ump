class Order{
  status{
    Started{
    addItemToOrder(InventoryItem aItem, int aQuantity)/{doAddOrderItem(aItem, aQuantity);} -> Started;
    deleteItemOfOrder(InventoryItem aItem )/{doDeleteItemOfOrder(aItem);} -> Started;
     updateOrderItemQuantity(InventoryItem aItem, int newQuantity)/{doUpdateOrderItemQuantity(aItem , newQuantity);} -> Started;
     updateOrder(PurchaseLevel aLevel, Student aStudent) /{doUpdateOrder(aLevel, aStudent);}-> Started;
      cancelOrder() -> Final;   
    payOrder(String authorizationCode)/{doPayOrder(authorizationCode);} -> Paid;
     startSchoolYear() -> Penalized ;
    payPenaltyOrder(String penaltyAuthCode, String authCode)/{rejectPayPenaltyOrder("started");}-> Started;  
      pickUpOrder()/{rejectPickUpOrder("started");} -> Started;      
    }                                                    
    Paid{
     cancelOrder() -> Final;
      startSchoolYear() -> Prepared;
      updateOrder(PurchaseLevel aLevel, Student aStudent) /{rejectUpdateOrder("paid");}-> Paid;
      addItemToOrder(InventoryItem aItem, int aQuantity)/{rejectAddItemToOrder("paid");} -> Paid;
     updateOrderItemQuantity(InventoryItem aItem, int newQuantity)/{rejectUpdateOrderItemQuantity("paid");} -> Paid;;
    deleteItemOfOrder(InventoryItem aItem)/{rejectDeleteItemOfOrder("paid");} -> Paid; 
    payOrder(String authorizationCode)/{rejectPayOrder("paid");} -> Paid;
    payPenaltyOrder(String penaltyAuthCode, String authCode)/{rejectPayPenaltyOrder("paid");}-> Paid;  
      pickUpOrder()/{rejectPickUpOrder("paid");} -> Paid;       
    }       
    Penalized{
      payPenaltyOrder(String penaltyAuthCode,String authCode)/{doPayPenaltyOrder(penaltyAuthCode, authCode);}-> Prepared;
        updateOrder(PurchaseLevel aLevel, Student aStudent) /{rejectUpdateOrder("penalized");}-> Penalized;
     addItemToOrder(InventoryItem aItem, int aQuantity)/{rejectAddItemToOrder("penalized");} -> Penalized;
     updateOrderItemQuantity(InventoryItem aItem, int newQuantity)/{rejectUpdateOrderItemQuantity("penalized");} -> Penalized;
       deleteItemOfOrder(InventoryItem aItem)/{rejectDeleteItemOfOrder("penalized");} -> Penalized;    
   payOrder(String authorizationCode)/{rejectPayOrder("penalized");} -> Penalized; 
     cancelOrder()/{rejectCancelOrder("penalized");} -> Penalized; 
     startSchoolYear()/{rejectStartSchoolYear();} -> Penalized ;  
     pickUpOrder()/{rejectPickUpOrder("penalized");} -> Penalized;   
    }
    Prepared{
      pickUpOrder() -> PickedUp;
       updateOrder(PurchaseLevel aLevel, Student aStudent) /{rejectUpdateOrder("prepared");}-> Prepared;
     addItemToOrder(InventoryItem aItem, int aQuantity)/{rejectAddItemToOrder("prepared");} -> Prepared;  
     updateOrderItemQuantity(InventoryItem aItem, int newQuantity)/{rejectUpdateOrderItemQuantity("prepared");} -> Prepared;
    deleteItemOfOrder(InventoryItem aItem)/{rejectDeleteItemOfOrder("prepared");} -> Prepared;
   payOrder(String authorizationCode)/{rejectPayOrder("prepared");} -> Prepared;   
   cancelOrder()/{rejectCancelOrder("prepared");} -> Prepared;
     startSchoolYear()/{rejectStartSchoolYear();} -> Prepared ; 
    payPenaltyOrder(String penaltyAuthCode, String authCode)/{rejectPayPenaltyOrder("prepared");}-> Prepared;       
    }
    PickedUp{
          updateOrder(PurchaseLevel aLevel, Student aStudent) /{rejectUpdateOrder("picked up");}-> PickedUp;
     addItemToOrder(InventoryItem aItem, int aQuantity)/{rejectAddItemToOrder("picked up");} -> PickedUp;   
     updateOrderItemQuantity(InventoryItem aItem, int newQuantity)/{rejectUpdateOrderItemQuantity("picked up");} -> PickedUp;
    deleteItemOfOrder(InventoryItem aItem)/{rejectDeleteItemOfOrder("picked up");} -> PickedUp;   
   payOrder(String authorizationCode)/{rejectPayOrder("picked up");} -> PickedUp;     
     cancelOrder()/{rejectCancelOrder("picked up");} -> PickedUp;  
     startSchoolYear()/{rejectStartSchoolYear();} -> PickedUp ; 
    payPenaltyOrder(String penaltyAuthCode, String authCode)/{rejectPayPenaltyOrder("picked up");}-> PickedUp;
  pickUpOrder()/{rejectPickUpOrder("picked up");} -> PickedUp;       
    }
  } 
  
/**
 * Updates the purchase level and the student of an order
 * author: Brian Yang 
 * param: aLevel the new purchase level 
 * param: aStudent the new student 
 */ 
  
   private void doUpdateOrder(PurchaseLevel aLevel, Student aStudent){
    this.setLevel(aLevel);
    if (aStudent.getParent()==null) {
      throw new RuntimeException("Student "+aStudent.getName()+" is not a child of the parent "+this.getParent().getEmail()+".");
    }
    if (!(this.parent.getEmail().equals(aStudent.getParent().getEmail()))) {
      throw new RuntimeException("Student "+aStudent.getName()+" is not a child of the parent "+this.getParent().getEmail()+".");
    }
     this.setStudent(aStudent);
  }

/**
 * Performs input validation and then adds a new OrderItem to   * CoolSupplies 
 * author: Brian Yang 
 * param: aItem an InventoryItem
 * param: aQuantity the quantity of the OrderItem
 */ 

   private void doAddOrderItem(InventoryItem aItem, int aQuantity){
     if (!(aQuantity>0)) {
       throw new RuntimeException("Quantity must be greater than 0.");
     }
    this.getCoolSupplies().addOrderItem(aQuantity, this, aItem);
  }

/**
 * Performs input validation and then updates the quantity of 
 * an OrderItem 
 * author: Brian Yang 
 * param: aItem an InventoryItem
 * param: newQuantity the new quantity of the OrderItem
 */ 

   private void doUpdateOrderItemQuantity(InventoryItem aItem, int newQuantity){
     if (!(newQuantity>0)) {
       throw new RuntimeException("Quantity must be greater than 0.");
     }
     boolean existsInOrder=false;
    for (OrderItem aOrderItem:this.getCoolSupplies().getOrderItems()) {
      if (aOrderItem.getItem().getName().equals(aItem.getName())) {
        aOrderItem.setQuantity(newQuantity);
        existsInOrder=true;
        break;
      }
    }
    if (!existsInOrder) {
      throw new RuntimeException("Item "+aItem.getName()+" does not exist in the order "+this.number+".");
    }
  }

/**
 * Performs input validation and then deletes an OrderItem 
 * author: Brian Yang 
 * param: aItem an InventoryItem
 */ 

   private void doDeleteItemOfOrder(InventoryItem aItem){
    boolean existsInOrder=false; 
    for(OrderItem aOrderItem: this.getCoolSupplies().getOrderItems()) {
      if (aOrderItem.getItem().getName().equals(aItem.getName())) {
        aOrderItem.delete();
        existsInOrder=true;
        break;
      }
    }
    if (!existsInOrder) {
      throw new RuntimeException("Item "+aItem.getName()+" does not exist in the order "+this.number+".");
    }
  }

/**
 * Performs input validation and then updates the order with    
 * the payment authorization code. 
 * author: Brian Yang 
 * param: authorizationCode the payment authorization code
 */ 

   private void doPayOrder(String authorizationCode){
    if (authorizationCode== null) {
       throw new RuntimeException("Authorization code is invalid");
     }
     if (authorizationCode.length()!=4) {
       throw new RuntimeException("Authorization code is invalid");
     }
    this.setAuthorizationCode(authorizationCode);
  }

/**
 * Performs input validation and then updates the order with
 * by setting the penalty authorization code and the payment 
 * authorization code 
 * author: Brian Yang 
 * param: penaltyAuthCode the penalty authorization code
 * param: authCode the payment authorization code 
 */ 

   private void doPayPenaltyOrder(String penaltyAuthCode, String authCode){
    if (penaltyAuthCode== null) {
       throw new RuntimeException("Penalty authorization code is invalid");
     }
     if (penaltyAuthCode.length()!=4) {
       throw new RuntimeException("Penalty authorization code is invalid");
     }
     if (authCode== null) {
       throw new RuntimeException("Authorization code is invalid");
     }
     if (authCode.length()!=4) {
       throw new RuntimeException("Authorization code is invalid");
     }
    this.setAuthorizationCode(authCode);
    this.setPenaltyAuthorizationCode(penaltyAuthCode);
  }

/**
 * Throws a runtime exception indicating that updating an order 
 * is not allowed in the current state
 * author: Brian Yang 
 * param: aState the current state
 */ 

   private void rejectUpdateOrder(String aState){
    throw new RuntimeException("Cannot update a "+aState+" order");
  }

/**
 * Throws a runtime exception indicating that adding an OrderItem
 * is not allowed in the current state
 * author: Brian Yang 
 * param: aState the current state
 */ 

   private void rejectAddItemToOrder(String aState){
    throw new RuntimeException("Cannot add items to a "+aState+" order");
  }

/**
 * Throws a runtime exception indicating that updating the quantity of an OrderItem
 * is not allowed in the current state
 * author: Brian Yang 
 * param: aState the current state
 */ 

   private void rejectUpdateOrderItemQuantity(String aState){
    throw new RuntimeException("Cannot update items in a "+aState+" order");
  }

/**
 * Throws a runtime exception indicating that deleting an OrderItem 
 * is not allowed in the current state
 * author: Brian Yang 
 * param: aState the current state
 */ 

   private void rejectDeleteItemOfOrder(String aState){
    throw new RuntimeException("Cannot delete items from a "+aState+" order");
  }

/**
 * Throws a runtime exception indicating that paying for an order
 * is not allowed in the current state
 * author: Brian Yang 
 * param: aState the current state
 */ 

   private void rejectPayOrder(String aState){
    if (aState.equals("paid")) {
      throw new RuntimeException("The order is already paid");
    }
    throw new RuntimeException("Cannot pay for a "+aState+" order");
  }

/**
 * Throws a runtime exception indicating that canceling an order
 * is not allowed in the current state
 * author: Brian Yang 
 * param: aState the current state
 */ 

   private void rejectCancelOrder(String aState){
    throw new RuntimeException("Cannot cancel a "+aState+" order");
  }

/**
 * Throws a runtime exception indicating that starting the school year for the order
 * is not allowed in the current state
 * author: Brian Yang 
 */ 

   private void rejectStartSchoolYear(){
    throw new RuntimeException("The school year has already been started");
  }

/**
 * Throws a runtime exception indicating that paying the penalty for the order
 * is not allowed in the current state
 * author: Brian Yang 
 * param: aState the current state
 */ 

   private void rejectPayPenaltyOrder(String aState){
    throw new RuntimeException("Cannot pay penalty for a "+aState+" order");
  }

/**
 * Throws a runtime exception indicating that picking up the order
 * is not allowed in the current state
 * author: Brian Yang 
 * param: aState the current state
 */ 

   private void rejectPickUpOrder(String aState){
    if (aState.equals("picked up")) {
      throw new RuntimeException("The order is already picked up");
    }
    throw new RuntimeException("Cannot pickup a "+aState+" order");
  }
  
  
}